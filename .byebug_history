c!
cc
c
params[:otp_secret]
@user.otp_secret
@user.otp_secret== params[:otp_secret]
c
@user.otp_secret(params[:otp_secret])
 @user.otp_secret
c
n
@user
n
c
n
c
n
c
@user.otp_provisioning_uri
c
n
totp
totp.verify(code)
n
ROTP::TOTP.new(otp_secret)
ROTP::TOTP.new(otp_secret
n
c
 @user.verify_otp(params[:otp_code])
c
totp.provisioning_uri(account_name)
n
c
n
@user.otp_provisioning_uri
c
n
@user
c
totp.provisioning_uri(account_name)
n
ROTP::TOTP.new(otp_secret, issuer: 'YourAppName')
n
c
n
self.otp_secret = ROTP::Base32.random_base32
c
totp.provisioning_uri(account_name)n
totp.provisioning_uri(account_name)
ntotp.provisioning_uri(account_name)
account_name
totp
 ROTP::TOTP.new(otp_secret, issuer: 'YourAppName')
n
@user.otp_provisioning_uri
n
@user.inspect
c
n
c
@user.otp_provisioning_uri
c
self.otp_required = ROTP::Base32.random_base32
c
n
ROTP::Base32.random_base32
c
qr_code = RQRCode::QRCode.new(@user.otp_provisioning_uri).as_svg
puts "OTP Provisioning URI: #{@user.otp_provisioning_uri}"
n
c
n
c
n
c
n
RQRCode::QRCode.new(@user.otp_provisioning_uri).as_svg
c
@current_user
@user
n
params[:id]
c
c!
c
c!
c
c!
c
decoded
n
decoded
n
header
request.headers['Authorization']
n
request.headers['Authorization']
c
n
news_articles
n
c
header
decoded
n
c
 @articles.each
article['title']
@articles.present?
c
@articles.present?
c
@articles.present?
c
@articles.present?
c
@articles.present?
c
@articles.present?
@articles
c
Rails.logger.info("API Response: #{parsed_response.inspect}")
c
parsed_response[:articles]
[200~parsed_response=~
response
c
@articles
@articles.each
n
c
 @articles.ids
 @articles.id
 @articles
c
@articles
c
n
parsed_response
n
HTTParty.get(url)
c
req = open(url)
c
@articles
c
HTTParty.get(url)
c
